#!/usr/bin/env python3.9
"""

This reads the associated png/in files in pngs/ and converts them into a format that sdl can load.

"""

from pathlib import Path
from PIL import Image

sdl_cursor_to_adwaita = (
    ('SDL_SYSTEM_CURSOR_ARROW',     'left_ptr'),          # Arrow (typically the default cursor)
    ('SDL_SYSTEM_CURSOR_IBEAM',     'xterm'),             # I-beam
    ('SDL_SYSTEM_CURSOR_WAIT',      'watch'),             # Wait
    ('SDL_SYSTEM_CURSOR_CROSSHAIR', 'tcross'),            # Crosshair
    ('SDL_SYSTEM_CURSOR_WAITARROW', 'left_ptr_watch'),    # Small wait cursor (or Wait if not available)
    ('SDL_SYSTEM_CURSOR_SIZENWSE',  'bd_double_arrow'),   # Double arrow pointing northwest and southeast
    ('SDL_SYSTEM_CURSOR_SIZENESW',  'fd_double_arrow'),   # Double arrow pointing northeast and southwest
    ('SDL_SYSTEM_CURSOR_SIZEWE',    'sb_h_double_arrow'), # Double arrow pointing west and east
    ('SDL_SYSTEM_CURSOR_SIZENS',    'sb_v_double_arrow'), # Double arrow pointing north and south
    ('SDL_SYSTEM_CURSOR_SIZEALL',   'move'),              # Four pointed arrow pointing north, south, east and west
    ('SDL_SYSTEM_CURSOR_NO',        'crossed_circle'),    # Slashed circle or crossbones
    ('SDL_SYSTEM_CURSOR_HAND',      'hand2'),             # Hand
    )

def load_png_to_bitarray(png_file):
    im = Image.open(png_file)

    pix = im.load()
    data = []
    mask = []
    i = 7
    datab = 0
    maskb = 0

    for y in range(im.width):
        for x in range(im.height):
            if pix[x, y] == (255, 255, 255, 255):
                # White
                datab |= (1<<i);
                maskb |= (1<<i);
            elif pix[x, y] == (0, 0, 0, 255):
                # Black
                # datab |= (1<<i);
                maskb |= (1<<i);
            else:
                # Transparent
                pass

            i -= 1
            if i < 0:
                i = 7
                data.append(datab)
                mask.append(maskb)
                datab = 0
                maskb = 0

    return im.width, im.height, data, mask

def load_im_file(im_file):
    with open(im_file, 'r') as fh:
        data = fh.read().split(' ')

    return int(data[1]), int(data[2])


def make_cursor_object(object_name, png_file, in_file):
    hexer = lambda x: f"0x{x:02x}"

    width, height, data, mask = load_png_to_bitarray(png_file)
    hot_x, hot_y = load_im_file(in_file)

    data_output = []
    mask_output = []
    for i in range(0, len(data), 8):
        data_output.append(', '.join(map(hexer, data[i:i+8])))
        mask_output.append(', '.join(map(hexer, mask[i:i+8])))


    print(f'const unsigned char BUILTIN_{object_name}_DATA[] = {{')
    print( '    ' + ',\n    '.join(data_output) + '};')
    print(f'const unsigned char BUILTIN_{object_name}_MASK[] = {{')
    print( '    ' + ',\n    '.join(data_output) + '};')
    print()
    print(f'BuiltinCursor BUILTIN_{object_name} = {{')
    print(f'    {width}, {width}, {hot_x}, {hot_y}, NULL,')
    print(f'    (const unsigned char *)&BUILTIN_{object_name}_DATA,')
    print(f'    (const unsigned char *)&BUILTIN_{object_name}_MASK}};')

    return f"BUILTIN_{object_name}"


print("/* Autogenerated by build_cursors.py */")
cursor_names = []
for sdl_name, adwaita_name in sdl_cursor_to_adwaita:
    ad_png_file = Path('pngs') / (adwaita_name + '.png')
    ad_in_file = Path('pngs') / (adwaita_name + '.in')

    print( '')
    print(f"/* {sdl_name} -> {adwaita_name} */")
    cursor_names.append(make_cursor_object(sdl_name, ad_png_file, ad_in_file))
    print()

print()
print("BuiltinCursor *BUILTIN_CURSORS[] = {")
for i, cursor_name in enumerate(cursor_names):
    if i == (len(cursor_names) - 1):
        print(f"    &{cursor_name}}};")
    else:
        print(f"    &{cursor_name},")



